apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'digital.wup.android-maven-publish'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile project(":annotation")
}

task processorTask(type: Exec) {
    commandLine 'cp', '../processor/build/libs/processor.jar', 'libs/'
}
processorTask.dependsOn(':processor:build')
preBuild.dependsOn(processorTask)


// Bintray Setup
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    publications = ['OdooAPI']

    pkg {
        repo = 'support'
        name = 'mobile-orm'

        userOrg = 'odooongobox'
        desc = 'Android Mobile ORM'

        websiteUrl = 'http://www.oogbox.com'
        issueTrackerUrl = 'https://github.com/oogbox/mobile-orm/issues'
        vcsUrl = 'https://github.com/oogbox/mobile-orm.git'

        licenses = ["AGPL-V3"]
        publish = true
        publicDownloadNumbers = true

        version {
            name = "1.0.0"
            desc = "Android Mobile ORM (SQLite) 1.0.0"
        }
    }
}

publishing {
    publications {
        OdooAPI(MavenPublication) {
            from components.android
            groupId 'com.oogbox.support'
            artifactId 'mobile-orm'
            version '1.0.0'
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}